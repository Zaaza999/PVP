// <auto-generated />
using System;
using KomunalinisCentras.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KomunalinisCentras.Backend.Data.Migrations
{
    [DbContext(typeof(KomunalinisDbContext))]
    [Migration("20250526231948_AddInvoicesPayments")]
    partial class AddInvoicesPayments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<string>("FormType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("Applications", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Application");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ApplicationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ApplicationGroups", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatuses");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.EmployeeTimeSlot", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("timeslot_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("employee_id");

                    b.Property<bool>("ForRezervation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("for_rezervation");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_taken");

                    b.Property<DateTime>("SlotDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("slot_date");

                    b.Property<TimeSpan>("TimeFrom")
                        .HasColumnType("time(6)")
                        .HasColumnName("time_from");

                    b.Property<TimeSpan>("TimeTo")
                        .HasColumnType("time(6)")
                        .HasColumnName("time_to");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext")
                        .HasColumnName("topic");

                    b.HasKey("TimeSlotId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeTimeSlots", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.GarbageCollectionSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("collection_date");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int>("WasteId")
                        .HasColumnType("int")
                        .HasColumnName("waste_id");

                    b.HasKey("ScheduleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("WasteId");

                    b.ToTable("GarbageCollectionSchedule", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location_name");

                    b.HasKey("LocationId");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderTxnId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("provider_txn_id");

                    b.Property<string>("RawPayload")
                        .HasColumnType("json")
                        .HasColumnName("raw_payload");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.PropertyUsageDeclarationEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("ActualArea")
                        .HasColumnType("double");

                    b.Property<string>("ActualPurpose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BuildingUniqueNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PropertyUsageDeclarationId")
                        .HasColumnType("int");

                    b.Property<double>("RegisteredArea")
                        .HasColumnType("double");

                    b.Property<string>("RegisteredPurpose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PropertyUsageDeclarationId");

                    b.ToTable("PropertyUsageDeclarationEntries");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reservation_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int")
                        .HasColumnName("timeslot_id");

                    b.Property<int>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("ReservationId");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Resident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ResidentCountDeclarationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResidentCountDeclarationId");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Subscription")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("subscription");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.VisitTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("topic_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("topic_name");

                    b.Property<string>("roleID")
                        .HasColumnType("longtext");

                    b.HasKey("TopicId");

                    b.HasIndex("RoleId");

                    b.ToTable("VisitTopics", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.WasteType", b =>
                {
                    b.Property<int>("WasteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("waste_id");

                    b.Property<string>("WasteName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("waste_name");

                    b.HasKey("WasteId");

                    b.ToTable("WasteTypes", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoleApplicationGroup", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ApplicationGroupId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "ApplicationGroupId");

                    b.HasIndex("ApplicationGroupId");

                    b.ToTable("RoleApplicationGroups", (string)null);
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ContainerFrequencyChange", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("FrequencyPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("ContainerFrequencyChange");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ContainerRequest", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ContainerVolumeLiters")
                        .HasColumnType("int");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailForInvoices")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EmptyingFrequencyPerYear")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("ContainerRequest_ApplicantFullName");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("ContainerRequest_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("ContainerRequest_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("ContainerRequest_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("ContainerRequest_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("ContainerRequest_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("ContainerRequest");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ContainerSizeChangeRequest", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentCapacityLiters")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("NewCapacityLiters")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("ContainerSizeChangeRequest_ApplicantFullName");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("ContainerSizeChangeRequest_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("ContainerSizeChangeRequest_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("ContainerSizeChangeRequest_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("ContainerSizeChangeRequest_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("ContainerSizeChangeRequest_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("ContainerSizeChangeRequest");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.EmailInvoiceRequest", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("EmailInvoiceRequest_ApplicantFullName");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("EmailInvoiceRequest_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("EmailInvoiceRequest_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("EmailInvoiceRequest_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("EmailInvoiceRequest_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("EmailInvoiceRequest_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("EmailInvoiceRequest");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.PayerDataChangeRequest", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("BuildingUniqueNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LeaseStartDateOrUsageStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentNoticeEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentNoticeMailingAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("RegisteredArea")
                        .HasColumnType("double");

                    b.Property<string>("RegisteredPurpose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RepresentativePosition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TenantCompanyCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TenantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("CorrespondenceAddress")
                                .HasColumnName("PayerDataChangeRequest_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("PayerDataChangeRequest_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("PayerDataChangeRequest_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("PayerDataChangeRequest_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("PayerDataChangeRequest_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("PayerDataChangeRequest");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.PropertyUnsuitability", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<string>("BuildingUniqueNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("PropertyUnsuitability_ApplicantFullName");

                            t.Property("BuildingUniqueNumber")
                                .HasColumnName("PropertyUnsuitability_BuildingUniqueNumber");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("PropertyUnsuitability_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("PropertyUnsuitability_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("PropertyUnsuitability_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("PropertyUnsuitability_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("PropertyUnsuitability_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("PropertyUnsuitability");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.PropertyUsageDeclaration", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("PropertyUsageDeclaration_ApplicantFullName");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("PropertyUsageDeclaration_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("PropertyUsageDeclaration_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("PropertyUsageDeclaration_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("PropertyUsageDeclaration_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("PropertyUsageDeclaration_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("PropertyUsageDeclaration");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.RefundRequest", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PayerCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("double");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefundAccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("RefundRequest_ApplicantFullName");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("RefundRequest_CorrespondenceAddress");
                        });

                    b.HasDiscriminator().HasValue("RefundRequest");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ResidentCountDeclaration", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("ResidentCountDeclaration_ApplicantFullName");

                            t.Property("Area")
                                .HasColumnName("ResidentCountDeclaration_Area");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("ResidentCountDeclaration_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("ResidentCountDeclaration_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("ResidentCountDeclaration_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("ResidentCountDeclaration_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("ResidentCountDeclaration_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("ResidentCountDeclaration");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.WasteFeeExemption", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<string>("BuildingUniqueNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("ElectricityMeterStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<double?>("InitialElectricityReading")
                        .HasColumnType("double");

                    b.Property<double?>("InitialWaterReading")
                        .HasColumnType("double");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PeriodTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WaterSupplyStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("WasteFeeExemption_ApplicantFullName");

                            t.Property("Area")
                                .HasColumnName("WasteFeeExemption_Area");

                            t.Property("BuildingUniqueNumber")
                                .HasColumnName("WasteFeeExemption_BuildingUniqueNumber");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("WasteFeeExemption_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("WasteFeeExemption_EmailAddress");

                            t.Property("PhoneNumber")
                                .HasColumnName("WasteFeeExemption_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("WasteFeeExemption_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("WasteFeeExemption_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("WasteFeeExemption");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.WasteFeeExemptionBusiness", b =>
                {
                    b.HasBaseType("KomunalinisCentras.Backend.Entities.Application");

                    b.Property<string>("ApplicantFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<string>("BuildingUniqueNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CorrespondenceAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PeriodTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyOwnerFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("Applications", t =>
                        {
                            t.Property("ApplicantFullName")
                                .HasColumnName("WasteFeeExemptionBusiness_ApplicantFullName");

                            t.Property("Area")
                                .HasColumnName("WasteFeeExemptionBusiness_Area");

                            t.Property("BuildingUniqueNumber")
                                .HasColumnName("WasteFeeExemptionBusiness_BuildingUniqueNumber");

                            t.Property("CorrespondenceAddress")
                                .HasColumnName("WasteFeeExemptionBusiness_CorrespondenceAddress");

                            t.Property("EmailAddress")
                                .HasColumnName("WasteFeeExemptionBusiness_EmailAddress");

                            t.Property("PeriodFrom")
                                .HasColumnName("WasteFeeExemptionBusiness_PeriodFrom");

                            t.Property("PeriodTo")
                                .HasColumnName("WasteFeeExemptionBusiness_PeriodTo");

                            t.Property("PhoneNumber")
                                .HasColumnName("WasteFeeExemptionBusiness_PhoneNumber");

                            t.Property("PropertyAddress")
                                .HasColumnName("WasteFeeExemptionBusiness_PropertyAddress");

                            t.Property("PropertyOwnerFullName")
                                .HasColumnName("WasteFeeExemptionBusiness_PropertyOwnerFullName");
                        });

                    b.HasDiscriminator().HasValue("WasteFeeExemptionBusiness");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Application", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.ApplicationGroup", "ApplicationGroup")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomunalinisCentras.Backend.Entities.ApplicationStatus", "Status")
                        .WithMany("Applications")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KomunalinisCentras.Backend.Entities.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("Status");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.EmployeeTimeSlot", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.GarbageCollectionSchedule", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomunalinisCentras.Backend.Entities.WasteType", "WasteType")
                        .WithMany()
                        .HasForeignKey("WasteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("WasteType");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Invoice", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Payment", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.PropertyUsageDeclarationEntry", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.PropertyUsageDeclaration", "Declaration")
                        .WithMany("Entries")
                        .HasForeignKey("PropertyUsageDeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Declaration");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Reservation", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.EmployeeTimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomunalinisCentras.Backend.Entities.VisitTopic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomunalinisCentras.Backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeSlot");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Resident", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.ResidentCountDeclaration", "Declaration")
                        .WithMany("Residents")
                        .HasForeignKey("ResidentCountDeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Declaration");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.User", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.VisitTopic", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomunalinisCentras.Backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleApplicationGroup", b =>
                {
                    b.HasOne("KomunalinisCentras.Backend.Entities.ApplicationGroup", null)
                        .WithMany()
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomunalinisCentras.Backend.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ApplicationGroup", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ApplicationStatus", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.PropertyUsageDeclaration", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("KomunalinisCentras.Backend.Entities.ResidentCountDeclaration", b =>
                {
                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
